{
  //#region  //*=========== React ===========
  "import React": {
    "prefix": "ir",
    "body": ["import * as React from 'react';"]
  },
  "React.useState": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState<$3>(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
    ]
  },
  "React.useEffect": {
    "prefix": "uf",
    "body": ["React.useEffect(() => {", "  $0", "}, []);"]
  },
  "React.useReducer": {
    "prefix": "ur",
    "body": [
      "const [state, dispatch] = React.useReducer(${0:someReducer}, {",
      "  ",
      "})"
    ]
  },
  "React.useRef": {
    "prefix": "urf",
    "body": ["const ${1:someRef} = React.useRef($0)"]
  },
  "React Functional Component": {
    "prefix": "rc",
    "body": [
      "import * as React from 'react';\n",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  )",
      "}"
    ]
  },
  "React Functional Component with Props": {
    "prefix": "rcp",
    "body": [
      "import * as React from 'react';\n",
      "import { cn } from '@/lib/utils';\n",
      "type ${1:${TM_FILENAME_BASE}}Props= {\n",
      "} & React.ComponentPropsWithoutRef<'div'>\n",
      "export default function ${1:${TM_FILENAME_BASE}}({className, ...rest}: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div className={cn(['', className])} {...rest}>",
      "      $0",
      "    </div>",
      "  )",
      "}"
    ]
  },
  //#endregion  //*======== React ===========

  //#region  //*=========== Commons ===========
  "Region": {
    "prefix": "reg",
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "body": [
      "//#region  //*=========== ${1} ===========",
      "${TM_SELECTED_TEXT}$0",
      "//#endregion  //*======== ${1} ==========="
    ]
  },
  "Region CSS": {
    "prefix": "regc",
    "scope": "css, scss",
    "body": [
      "/* #region  /**=========== ${1} =========== */",
      "${TM_SELECTED_TEXT}$0",
      "/* #endregion  /**======== ${1} =========== */"
    ]
  },
  //#endregion  //*======== Commons ===========

  //#region  //*=========== Next.js ===========
  "Next Pages": {
    "prefix": ["np", "pages", "next page"],
    "body": [
      "export default function Page({",
      "  params,",
      "}: {",
      "  params: { slug: string }",
      "}) {",
      "  return <h1>My Page</h1>",
      "}"
    ],
    "description": ""
  },

  "Next Layout": {
    "prefix": ["nl", "layout", "next layout"],
    "body": [
      "export const metadata = {",
      "  title: 'Create Next App',",
      "  description: 'Generated by create next app',",
      "};\n",
      "export default function ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Layout({",
      "  children,",
      "}: {",
      "  children: React.ReactNode",
      "}) {",
      "  return (",
      "   <html lang='en'>",
      "     <body>{children}</body>",
      "   </html>",
      "  )",
      " }"
    ]
  },

  "Next API": {
    "prefix": "napi",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';\n",
      "export default async function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  if (req.method === 'GET') {",
      "    res.status(200).json({ name: 'Bambang' });",
      "  } else {",
      "    res.status(405).json({ message: 'Method Not Allowed' });",
      "  }",
      "}"
    ]
  },
  "Get Static Props": {
    "prefix": "gsp",
    "body": [
      "export const getStaticProps = async (context: GetStaticPropsContext) => {",
      "  return {",
      "    props: {}",
      "  };",
      "}"
    ]
  },
  "Get Static Paths": {
    "prefix": "gspa",
    "body": [
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "  return {",
      "    paths: [",
      "      { params: { $1 }}",
      "    ],",
      "    fallback: ",
      "  };",
      "}"
    ]
  },
  "Get Server Side Props": {
    "prefix": "gssp",
    "body": [
      "export const getServerSideProps = async (context: GetServerSidePropsContext) => {",
      "  return {",
      "    props: {}",
      "  };",
      "}"
    ]
  },
  "Infer Get Static Props": {
    "prefix": "igsp",
    "body": "InferGetStaticPropsType<typeof getStaticProps>"
  },
  "Infer Get Server Side Props": {
    "prefix": "igssp",
    "body": "InferGetServerSidePropsType<typeof getServerSideProps>"
  },
  "Import useRouter": {
    "prefix": "imust",
    "body": ["import { useRouter } from 'next/router';"]
  },
  "Import Next Image": {
    "prefix": "imimg",
    "body": ["import Image from 'next/image';"]
  },
  "Import Next Link": {
    "prefix": "iml",
    "body": ["import Link from 'next/link';"]
  },
  "Import className lib": {
    "prefix": "icn",
    "body": ["import { cn } from '@/lib/utils';"]
  },
  "Import Typography": {
    "prefix": "itypo",
    "body": [
      "import Typography, {TextFontWeight, TextVariant} from '@/components/typography';"
    ]
  },
  //#endregion  //*======== Next.js ===========

  //#region  //*=========== Snippet Wrap ===========
  "Wrap with Fragment": {
    "prefix": "ff",
    "body": ["<>", "\t${TM_SELECTED_TEXT}", "</>"]
  },
  "Wrap with cn": {
    "prefix": "cn",
    "body": ["{cn([${TM_SELECTED_TEXT}$0])}"]
  },
  "Wrap with div": {
    "prefix": "di",
    "body": ["<div className='$0'></div>"]
  },
  "Wrap with div and cn": {
    "prefix": "di",
    "body": ["<div className={cn($0)}></div>"]
  },
  "Wrap with Typography": {
    "prefix": "typo",
    "body": ["<Typography>$0</Typography>"]
  },
  "Wrap with Typography with variant and weight": {
    "prefix": "typovw",
    "body": ["<Typography variant='base' weight='normal'>$0</Typography>"]
  },

  "Wrap with i18n": {
    "prefix": ["t(", "i18n"],
    "body": ["{t('$0')}"]
  },
  //#endregion  //*======== Snippet Wrap ===========

  "Logger": {
    "prefix": "lg",
    "body": [
      "logger({ ${1:${CLIPBOARD}} }, '${TM_FILENAME} line ${TM_LINE_NUMBER}')"
    ]
  },

  //#region //*=========== Paxer Snippets ===========
  "Paxer Component full": {
    "prefix": ["paxer component full"],
    "body": [
      "import tw from 'tailwind-styled-components';",
      "",
      "import { cn } from '@/lib/utils';",
      "",
      "type Props = {",
      "  className?: string;",
      "}",
      "",
      "const Container = tw.div``;",
      "",
      "export default function ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/}Component({ className }: Props) {",
      "  return <Container className={cn(className)} data-testid='test-element'>",
      "    Hi I'm ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} Component",
      "  </Container>;",
      "}",
      ""
    ],
    "description": "Paxer Component Props Styled Component"
  },

  "Paxer Component": {
    "prefix": ["paxer component"],
    "body": [
      "export default function ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/}Component() {",
      "  return <div data-testid='test-element'>",
      "    Hi I'm ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} Component",
      "  </div>;",
      "}",
      ""
    ],
    "description": "Paxer Component"
  },

  "Paxer Storybook": {
    "prefix": "paxer storybook",
    "body": [
      "import type { Meta, StoryObj } from '@storybook/react';",
      "",
      "import ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} from './';",
      "",
      "const meta: Meta<typeof ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/}> = {",
      "  title: 'Components/${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}',",
      "  component: ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/},",
      "  tags: ['autodocs'],",
      "  argTypes: {},",
      "};",
      "",
      "export default meta;",
      "type Story = StoryObj<typeof ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/}>;",
      "",
      "export const Default: Story = {",
      "  args: {",
      "    className: '',",
      "  },",
      "};",
      ""
    ],
    "description": "Paxer Storybook"
  },

  "Paxer Test": {
    "prefix": ["paxer test"],
    "body": [
      "import { render, screen } from '@testing-library/react';",
      "",
      "import ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} from './';",
      "",
      "describe('${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} component', () => {",
      "  it('should renders ${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} component correctly', () => {",
      "    render(<${TM_FILENAME/^([a-zA-Z]+)(?:-([a-zA-Z]+))*\\..+$/${1:/capitalize}${2:/capitalize}/} />);",
      "    const element = screen.getByTestId('test-element');",
      "    expect(element).toBeInTheDocument();",
      "  });",
      "});",
      ""
    ],
    "description": "Paxer Test"
  },

  "Paxer Import Export": {
    "prefix": "paxer import export",
    "body": [
      "import ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/} from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}';",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}",
      ""
    ],
    "description": "Paxer Import Export"
  }
  //#region //*=========== Paxer Snippets ===========
}
